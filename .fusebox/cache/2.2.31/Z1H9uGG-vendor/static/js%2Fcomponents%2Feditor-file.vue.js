module.exports = { contents: "var _p = {};\nvar _v = function(exports){\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = {\n    name: 'editor-file',\n    data: function () {\n        return {\n            isLoading: false,\n            isLoadingText: '',\n            newFolderName: '',\n            newFolderShow: false,\n            newFolderError: false,\n            fetchFromUrlURL: '',\n            fetchFromUrlShow: false,\n            folders: [],\n            currentFolder: '',\n            currentFile: '',\n            currentAlign: 'left',\n            files: [],\n            uploadSucceeded: false,\n            postUploadChecks: 0,\n            renameFileShow: false,\n            renameFileId: '',\n            renameFileFilename: '',\n            deleteFileShow: false,\n            deleteFileId: '',\n            deleteFileFilename: ''\n        };\n    },\n    computed: {\n        isShown: function () {\n            return this.$store.state.editorFile.shown;\n        },\n        mode: function () {\n            return this.$store.state.editorFile.mode;\n        }\n    },\n    methods: {\n        init: function () {\n            $(this.$refs.editorFileUploadInput).on('change', this.upload);\n            this.refreshFolders();\n        },\n        cancel: function () {\n            $(this.$refs.editorFileUploadInput).off('change', this.upload);\n            this.$store.dispatch('editorFile/close');\n        },\n        filesize: function (rawSize) {\n            return this.$helpers.common.filesize(rawSize);\n        },\n        selectFile: function (fileId) {\n            this.currentFile = fileId;\n        },\n        insertFileLink: function () {\n            var selFile = this._.find(this.files, ['_id', this.currentFile]);\n            selFile.normalizedPath = (selFile.folder === 'f:') ? selFile.filename : selFile.folder.slice(2) + '/' + selFile.filename;\n            selFile.titleGuess = this._.startCase(selFile.basename);\n            var textToInsert = '';\n            if (this.mode === 'image') {\n                textToInsert = '![' + selFile.titleGuess + '](/uploads/' + selFile.normalizedPath + ' \"' + selFile.titleGuess + '\")';\n                switch (this.currentAlign) {\n                    case 'center':\n                        textToInsert += '{.align-center}';\n                        break;\n                    case 'right':\n                        textToInsert += '{.align-right}';\n                        break;\n                    case 'logo':\n                        textToInsert += '{.pagelogo}';\n                        break;\n                }\n            }\n            else {\n                textToInsert = '[' + selFile.titleGuess + '](/uploads/' + selFile.normalizedPath + ' \"' + selFile.titleGuess + '\")';\n            }\n            this.$store.dispatch('editor/insert', textToInsert);\n            this.$store.dispatch('alert', {\n                style: 'blue',\n                icon: 'ui-1_check-square-09',\n                msg: (this.mode === 'file') ? this.$t('editor.filesuccess') : this.$t('editor.imagesuccess')\n            });\n            this.cancel();\n        },\n        newFolder: function () {\n            var self = this;\n            this.newFolderName = '';\n            this.newFolderError = false;\n            this.newFolderShow = true;\n            this._.delay(function () { self.$refs.editorFileNewFolderInput.focus(); }, 400);\n        },\n        newFolderDiscard: function () {\n            this.newFolderShow = false;\n        },\n        newFolderCreate: function () {\n            var self = this;\n            var regFolderName = new RegExp('^[a-z0-9][a-z0-9-]*[a-z0-9]$');\n            this.newFolderName = this._.kebabCase(this._.trim(this.newFolderName));\n            if (this._.isEmpty(this.newFolderName) || !regFolderName.test(this.newFolderName)) {\n                this.newFolderError = true;\n                return;\n            }\n            this.newFolderDiscard();\n            this.isLoadingText = this.$t('modal.newfolderloading');\n            this.isLoading = true;\n            this.$nextTick(function () {\n                socket.emit('uploadsCreateFolder', { foldername: self.newFolderName }, function (data) {\n                    self.folders = data;\n                    self.currentFolder = self.newFolderName;\n                    self.files = [];\n                    self.isLoading = false;\n                    self.$store.dispatch('alert', {\n                        style: 'blue',\n                        icon: 'files_folder-check',\n                        msg: self.$t('modal.newfoldersuccess', { name: self.newFolderName })\n                    });\n                });\n            });\n        },\n        fetchFromUrl: function () {\n            var self = this;\n            this.fetchFromUrlURL = '';\n            this.fetchFromUrlShow = true;\n            this._.delay(function () { self.$refs.editorFileFetchInput.focus(); }, 400);\n        },\n        fetchFromUrlDiscard: function () {\n            this.fetchFromUrlShow = false;\n        },\n        fetchFromUrlGo: function () {\n            var self = this;\n            this.fetchFromUrlDiscard();\n            this.isLoadingText = 'Fetching image...';\n            this.isLoading = true;\n            this.$nextTick(function () {\n                socket.emit('uploadsFetchFileFromURL', { folder: self.currentFolder, fetchUrl: self.fetchFromUrlURL }, function (data) {\n                    if (data.ok) {\n                        self.waitChangeComplete(self.files.length, true);\n                    }\n                    else {\n                        self.isLoading = false;\n                        self.$store.dispatch('alert', {\n                            style: 'red',\n                            icon: 'ui-2_square-remove-09',\n                            msg: self.$t('editor.fileuploaderror', { err: data.msg })\n                        });\n                    }\n                });\n            });\n        },\n        renameFile: function () {\n            var self = this;\n            var c = this._.find(this.files, ['_id', this.renameFileId]);\n            this.renameFileFilename = c.basename || '';\n            this.renameFileShow = true;\n            this._.delay(function () {\n                self.$refs.editorFileRenameInput.select();\n            }, 100);\n        },\n        renameFileDiscard: function () {\n            this.renameFileShow = false;\n        },\n        renameFileGo: function () {\n            var self = this;\n            this.renameFileDiscard();\n            this.isLoadingText = this.$t('modal.renamefileloading');\n            this.isLoading = true;\n            this.$nextTick(function () {\n                socket.emit('uploadsRenameFile', { uid: self.renameFileId, folder: self.currentFolder, filename: self.renameFileFilename }, function (data) {\n                    if (data.ok) {\n                        self.waitChangeComplete(self.files.length, false);\n                    }\n                    else {\n                        self.isLoading = false;\n                        self.$store.dispatch('alert', {\n                            style: 'red',\n                            icon: 'ui-2_square-remove-09',\n                            msg: self.$t('modal.renamefileerror', { err: data.msg })\n                        });\n                    }\n                });\n            });\n        },\n        moveFile: function (uid, fld) {\n            var self = this;\n            this.isLoadingText = this.$t('editor.filemoveloading');\n            this.isLoading = true;\n            this.$nextTick(function () {\n                socket.emit('uploadsMoveFile', { uid: uid, folder: fld }, function (data) {\n                    if (data.ok) {\n                        self.loadFiles();\n                        self.$store.dispatch('alert', {\n                            style: 'blue',\n                            icon: 'files_check',\n                            msg: self.$t('editor.filemovesuccess')\n                        });\n                    }\n                    else {\n                        self.isLoading = false;\n                        self.$store.dispatch('alert', {\n                            style: 'red',\n                            icon: 'ui-2_square-remove-09',\n                            msg: self.$t('editor.filemoveerror', { err: data.msg })\n                        });\n                    }\n                });\n            });\n        },\n        deleteFileWarn: function (show) {\n            if (show) {\n                var c = this._.find(this.files, ['_id', this.deleteFileId]);\n                this.deleteFileFilename = c.filename || this.$t('editor.filedeletedefault');\n            }\n            this.deleteFileShow = show;\n        },\n        deleteFileGo: function () {\n            var _this = this;\n            var self = this;\n            this.deleteFileWarn(false);\n            this.isLoadingText = this.$t('editor.filedeleteloading');\n            this.isLoading = true;\n            this.$nextTick(function () {\n                socket.emit('uploadsDeleteFile', { uid: _this.deleteFileId }, function (data) {\n                    self.loadFiles();\n                    self.$store.dispatch('alert', {\n                        style: 'blue',\n                        icon: 'ui-1_trash',\n                        msg: self.$t('editor.filedeletesuccess')\n                    });\n                });\n            });\n        },\n        selectFolder: function (fldName) {\n            this.currentFolder = fldName;\n            this.loadFiles();\n        },\n        refreshFolders: function () {\n            var self = this;\n            this.isLoadingText = this.$t('editor.foldersloading');\n            this.isLoading = true;\n            this.currentFolder = '';\n            this.currentImage = '';\n            this.$nextTick(function () {\n                socket.emit('uploadsGetFolders', {}, function (data) {\n                    self.folders = data;\n                    self.loadFiles();\n                });\n            });\n        },\n        loadFiles: function (silent) {\n            var self = this;\n            if (!silent) {\n                this.isLoadingText = this.$t('editor.fileloading');\n                this.isLoading = true;\n            }\n            return new Promise(function (resolve, reject) {\n                self.$nextTick(function () {\n                    var loadAction = (self.mode === 'image') ? 'uploadsGetImages' : 'uploadsGetFiles';\n                    socket.emit(loadAction, { folder: self.currentFolder }, function (data) {\n                        self.files = data;\n                        if (!silent) {\n                            self.isLoading = false;\n                        }\n                        self.attachContextMenus();\n                        resolve(true);\n                    });\n                });\n            });\n        },\n        waitChangeComplete: function (oldAmount, expectChange) {\n            var self = this;\n            expectChange = (this._.isBoolean(expectChange)) ? expectChange : true;\n            this.postUploadChecks++;\n            this.isLoadingText = this.$t('editor.fileprocessing');\n            this.$nextTick(function () {\n                self.loadFiles(true).then(function () {\n                    if ((self.files.length !== oldAmount) === expectChange) {\n                        self.postUploadChecks = 0;\n                        self.isLoading = false;\n                    }\n                    else if (self.postUploadChecks > 5) {\n                        self.postUploadChecks = 0;\n                        self.isLoading = false;\n                        self.$store.dispatch('alert', {\n                            style: 'red',\n                            icon: 'ui-2_square-remove-09',\n                            msg: self.$t('editor.fileerror')\n                        });\n                    }\n                    else {\n                        self._.delay(function () {\n                            self.waitChangeComplete(oldAmount, expectChange);\n                        }, 1500);\n                    }\n                });\n            });\n        },\n        attachContextMenus: function () {\n            var self = this;\n            var moveFolders = this._.map(this.folders, function (f) {\n                return {\n                    name: (f !== '') ? f : '/ (root)',\n                    icon: 'nc-icon-outline files_folder-15',\n                    callback: function (key, opt) {\n                        var moveFileId = self._.toString($(opt.$trigger).data('uid'));\n                        var moveFileDestFolder = self._.nth(self.folders, key);\n                        self.moveFile(moveFileId, moveFileDestFolder);\n                    }\n                };\n            });\n            $.contextMenu('destroy', '.editor-modal-choices > figure');\n            $.contextMenu({\n                selector: '.editor-modal-choices > figure',\n                appendTo: '.editor-modal-choices',\n                position: function (opt, x, y) {\n                    $(opt.$trigger).addClass('is-contextopen');\n                    var trigPos = $(opt.$trigger).position();\n                    var trigDim = { w: $(opt.$trigger).width() / 5, h: $(opt.$trigger).height() / 2 };\n                    opt.$menu.css({ top: trigPos.top + trigDim.h, left: trigPos.left + trigDim.w });\n                },\n                events: {\n                    hide: function (opt) {\n                        $(opt.$trigger).removeClass('is-contextopen');\n                    }\n                },\n                items: {\n                    rename: {\n                        name: self.$t('editor.filerenameaction'),\n                        icon: 'nc-icon-outline files_vector',\n                        callback: function (key, opt) {\n                            self.renameFileId = self._.toString(opt.$trigger[0].dataset.uid);\n                            self.renameFile();\n                        }\n                    },\n                    move: {\n                        name: self.$t('editor.filemoveaction'),\n                        icon: 'fa-folder-open-o',\n                        items: moveFolders\n                    },\n                    delete: {\n                        name: self.$t('editor.filedeleteaction'),\n                        icon: 'icon-trash2',\n                        callback: function (key, opt) {\n                            self.deleteFileId = self._.toString(opt.$trigger[0].dataset.uid);\n                            self.deleteFileWarn(true);\n                        }\n                    }\n                }\n            });\n        },\n        upload: function () {\n            var self = this;\n            var curFileAmount = this.files.length;\n            var uplUrl = (self.mode === 'image') ? '/uploads/img' : '/uploads/file';\n            $(this.$refs.editorFileUploadInput).simpleUpload(uplUrl, {\n                name: (self.mode === 'image') ? 'imgfile' : 'binfile',\n                data: {\n                    folder: self.currentFolder\n                },\n                limit: 20,\n                expect: 'json',\n                allowedExts: (self.mode === 'image') ? ['jpg', 'jpeg', 'gif', 'png', 'webp'] : undefined,\n                allowedTypes: (self.mode === 'image') ? ['image/png', 'image/jpeg', 'image/gif', 'image/webp'] : undefined,\n                maxFileSize: (self.mode === 'image') ? 3145728 : 0,\n                init: function (totalUploads) {\n                    self.uploadSucceeded = false;\n                    self.isLoadingText = 'Preparing to upload...';\n                    self.isLoading = true;\n                },\n                progress: function (progress) {\n                    self.isLoadingText = 'Uploading...' + Math.round(progress) + '%';\n                },\n                success: function (data) {\n                    if (data.ok) {\n                        var failedUpls = self._.filter(data.results, ['ok', false]);\n                        if (failedUpls.length) {\n                            self._.forEach(failedUpls, function (u) {\n                                self.$store.dispatch('alert', {\n                                    style: 'red',\n                                    icon: 'ui-2_square-remove-09',\n                                    msg: self.$t('editor.fileuploaderror', { err: u.msg })\n                                });\n                            });\n                            if (failedUpls.length < data.results.length) {\n                                self.uploadSucceeded = true;\n                            }\n                        }\n                        else {\n                            self.uploadSucceeded = true;\n                            self.$store.dispatch('alert', {\n                                style: 'blue',\n                                icon: 'arrows-1_cloud-upload-96',\n                                msg: self.$t('editor.fileuploadsuccess')\n                            });\n                        }\n                    }\n                    else {\n                        self.$store.dispatch('alert', {\n                            style: 'red',\n                            icon: 'ui-2_square-remove-09',\n                            msg: self.$t('editor.fileuploaderror', { err: data.msg })\n                        });\n                    }\n                },\n                error: function (error) {\n                    self.$store.dispatch('alert', {\n                        style: 'red',\n                        icon: 'ui-2_square-remove-09',\n                        msg: self.$t('editor.fileuploaderror', { err: error.message })\n                    });\n                },\n                finish: function () {\n                    if (self.uploadSucceeded) {\n                        self.waitChangeComplete(curFileAmount, true);\n                    }\n                    else {\n                        self.isLoading = false;\n                    }\n                }\n            });\n        }\n    },\n    mounted: function () {\n        this.$root.$on('editorFile/init', this.init);\n    }\n};\n\n};\n_p.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{\"duration\":400}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShown),expression:\"isShown\"}],staticClass:\"modal\"},[_c('transition',{attrs:{\"name\":\"modal-background\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShown),expression:\"isShown\"}],staticClass:\"modal-background\"})]),_c('div',{staticClass:\"modal-container\"},[_c('transition',{attrs:{\"name\":\"modal-content\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isShown),expression:\"isShown\"}],staticClass:\"modal-content is-expanded\"},[_c('header',{staticClass:\"is-green\"},[_c('span',[_vm._v(_vm._s((_vm.mode === 'file') ? _vm.$t('editor.filetitle') : _vm.$t('editor.imagetitle')))]),_c('p',{staticClass:\"modal-notify\",class:{ \"is-active\": _vm.isLoading }},[_c('span',[_vm._v(_vm._s(_vm.isLoadingText))]),_c('i')])]),_c('div',{staticClass:\"modal-toolbar is-green\"},[_c('a',{staticClass:\"button\",on:{\"click\":_vm.newFolder}},[_c('i',{staticClass:\"nc-icon-outline files_folder-14\"}),_c('span',[_vm._v(_vm._s(_vm.$t('editor.newfolder')))])]),_c('a',{staticClass:\"button\",attrs:{\"id\":\"btn-editor-file-upload\"}},[_c('i',{staticClass:\"nc-icon-outline arrows-1_cloud-upload-94\"}),_c('span',[_vm._v(_vm._s((_vm.mode === 'file') ? _vm.$t('editor.fileupload') : _vm.$t('editor.imageupload')))]),_c('label',[_c('input',{ref:\"editorFileUploadInput\",attrs:{\"type\":\"file\",\"multiple\":\"multiple\",\"disabled\":_vm.isLoading}})])]),(_vm.mode === \"image\")?_c('a',{staticClass:\"button\",on:{\"click\":_vm.fetchFromUrl}},[_c('i',{staticClass:\"nc-icon-outline arrows-1_cloud-download-93\"}),_c('span',[_vm._v(\"Fetch from URL\")])]):_vm._e()]),_c('section',{staticClass:\"is-gapless\"},[_c('div',{staticClass:\"columns is-stretched\"},[_c('div',{staticClass:\"column is-one-quarter modal-sidebar is-green\",staticStyle:{\"max-width\":\"350px\"}},[_c('div',{staticClass:\"model-sidebar-header\"},[_vm._v(_vm._s(_vm.$t('editor.folders')))]),_c('ul',{staticClass:\"model-sidebar-list\"},_vm._l((_vm.folders),function(fld){return _c('li',[_c('a',{class:{ \"is-active\": _vm.currentFolder === fld },on:{\"click\":function($event){_vm.selectFolder(fld)}}},[_c('i',{staticClass:\"nc-icon-outline files_folder-17\"}),_c('span',[_vm._v(\"/ \"+_vm._s(fld))])])])})),(_vm.mode === \"image\")?_c('div',{staticClass:\"model-sidebar-header\"},[_vm._v(\"Alignment\")]):_vm._e(),(_vm.mode === \"image\")?_c('div',{staticClass:\"model-sidebar-content\"},[_c('p',{staticClass:\"control is-fullwidth\"},[_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.currentAlign),expression:\"currentAlign\"}],on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.currentAlign=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{\"value\":\"left\"}},[_vm._v(_vm._s(_vm.$t('editor.imagealignleft')))]),_c('option',{attrs:{\"value\":\"center\"}},[_vm._v(_vm._s(_vm.$t('editor.imagealigncenter')))]),_c('option',{attrs:{\"value\":\"right\"}},[_vm._v(_vm._s(_vm.$t('editor.imagealignright')))]),_c('option',{attrs:{\"value\":\"logo\"}},[_vm._v(_vm._s(_vm.$t('editor.imagealignlogo')))])])])]):_vm._e()]),(_vm.mode === \"file\")?_c('div',{staticClass:\"column editor-modal-choices editor-modal-file-choices\"},[_vm._l((_vm.files),function(fl){return _c('figure',{class:{ \"is-active\": _vm.currentFile === fl._id },attrs:{\"data-uid\":fl._id},on:{\"click\":function($event){_vm.selectFile(fl._id)}}},[_c('i',{staticClass:\"icon-file\"}),_c('span',[_c('strong',[_vm._v(_vm._s(fl.filename))])]),_c('span',[_vm._v(_vm._s(fl.mime))]),_c('span',[_vm._v(_vm._s(_vm.filesize(fl.filesize)))])])}),_c('em',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.files.length < 1),expression:\"files.length < 1\"}]},[_c('i',{staticClass:\"icon-marquee-minus\"}),_vm._v(_vm._s(_vm.$t('editor.filefolderempty')))])],2):_vm._e(),(_vm.mode === \"image\")?_c('div',{staticClass:\"column editor-modal-choices editor-modal-image-choices\"},[_vm._l((_vm.files),function(img){return _c('figure',{class:{ \"is-active\": _vm.currentFile === img._id },attrs:{\"data-uid\":img._id},on:{\"click\":function($event){_vm.selectFile(img._id)}}},[_c('img',{attrs:{\"src\":\"/uploads/t/\" + img._id + \".png\"}}),_c('span',[_c('strong',[_vm._v(_vm._s(img.basename))])]),_c('span',[_vm._v(_vm._s(_vm.filesize(img.filesize)))])])}),_c('em',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.files.length < 1),expression:\"files.length < 1\"}]},[_c('i',{staticClass:\"icon-marquee-minus\"}),_vm._v(_vm._s(_vm.$t('editor.filefolderempty')))])],2):_vm._e()])]),_c('footer',[_c('a',{staticClass:\"button is-grey is-outlined\",on:{\"click\":_vm.cancel}},[_vm._v(_vm._s(_vm.$t('editor.discard')))]),_c('a',{staticClass:\"button is-green\",on:{\"click\":_vm.insertFileLink}},[_vm._v(_vm._s((_vm.mode === 'file') ? _vm.$t('editor.fileinsert') : _vm.$t('editor.imageinsert')))])])])])],1),_c('transition',{attrs:{\"duration\":400}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.newFolderShow),expression:\"newFolderShow\"}],staticClass:\"modal is-superimposed\"},[_c('transition',{attrs:{\"name\":\"modal-background\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.newFolderShow),expression:\"newFolderShow\"}],staticClass:\"modal-background\"})]),_c('div',{staticClass:\"modal-container\"},[_c('transition',{attrs:{\"name\":\"modal-content\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.newFolderShow),expression:\"newFolderShow\"}],staticClass:\"modal-content\"},[_c('header',{staticClass:\"is-light-blue\"},[_vm._v(_vm._s(_vm.$t('modal.newfoldertitle')))]),_c('section',[_c('label',{staticClass:\"label\"},[_vm._v(_vm._s(_vm.$t('modal.newfoldername')))]),_c('p',{staticClass:\"control is-fullwidth\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.newFolderName),expression:\"newFolderName\"}],ref:\"editorFileNewFolderInput\",staticClass:\"input\",attrs:{\"type\":\"text\",\"placeholder\":_vm.$t(\"modal.newfoldernameplaceholder\")},domProps:{\"value\":(_vm.newFolderName)},on:{\"keyup\":[function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"enter\",13)){ return null; }_vm.newFolderCreate($event)},function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"esc\",27)){ return null; }_vm.newFolderDiscard($event)}],\"input\":function($event){if($event.target.composing){ return; }_vm.newFolderName=$event.target.value}}}),_c('span',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.newFolderError),expression:\"newFolderError\"}],staticClass:\"help is-danger\"},[_vm._v(_vm._s(_vm.$t('modal.newfolderinvalid')))])])]),_c('footer',[_c('a',{staticClass:\"button is-grey is-outlined\",on:{\"click\":_vm.newFolderDiscard}},[_vm._v(_vm._s(_vm.$t('modal.discard')))]),_c('a',{staticClass:\"button is-light-blue\",on:{\"click\":_vm.newFolderCreate}},[_vm._v(_vm._s(_vm.$t('modal.create')))])])])])],1)],1)]),_c('transition',{attrs:{\"duration\":400}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.fetchFromUrlShow),expression:\"fetchFromUrlShow\"}],staticClass:\"modal is-superimposed\"},[_c('transition',{attrs:{\"name\":\"modal-background\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.fetchFromUrlShow),expression:\"fetchFromUrlShow\"}],staticClass:\"modal-background\"})]),_c('div',{staticClass:\"modal-container\"},[_c('transition',{attrs:{\"name\":\"modal-content\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.fetchFromUrlShow),expression:\"fetchFromUrlShow\"}],staticClass:\"modal-content\"},[_c('header',{staticClass:\"is-light-blue\"},[_vm._v(\"Fetch Image from URL\")]),_c('section',[_c('label',{staticClass:\"label\"},[_vm._v(\"Enter full URL path to the image:\")]),_c('p',{staticClass:\"control is-fullwidth\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.fetchFromUrlURL),expression:\"fetchFromUrlURL\"}],ref:\"editorFileFetchInput\",staticClass:\"input\",attrs:{\"type\":\"text\",\"placeholder\":\"http://www.example.com/some-image.png\"},domProps:{\"value\":(_vm.fetchFromUrlURL)},on:{\"keyup\":[function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"enter\",13)){ return null; }_vm.fetchFromUrlGo($event)},function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"esc\",27)){ return null; }_vm.fetchFromUrlDiscard($event)}],\"input\":function($event){if($event.target.composing){ return; }_vm.fetchFromUrlURL=$event.target.value}}}),_c('span',{staticClass:\"help is-danger is-hidden\"},[_vm._v(\"This URL path is invalid!\")])])]),_c('footer',[_c('a',{staticClass:\"button is-grey is-outlined\",on:{\"click\":_vm.fetchFromUrlDiscard}},[_vm._v(\"Discard\")]),_c('a',{staticClass:\"button is-light-blue\",on:{\"click\":_vm.fetchFromUrlGo}},[_vm._v(\"Fetch\")])])])])],1)],1)]),_c('transition',{attrs:{\"duration\":400}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.renameFileShow),expression:\"renameFileShow\"}],staticClass:\"modal is-superimposed\"},[_c('transition',{attrs:{\"name\":\"modal-background\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.renameFileShow),expression:\"renameFileShow\"}],staticClass:\"modal-background\"})]),_c('div',{staticClass:\"modal-container\"},[_c('transition',{attrs:{\"name\":\"modal-content\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.renameFileShow),expression:\"renameFileShow\"}],staticClass:\"modal-content\"},[_c('header',{staticClass:\"is-indigo\"},[_vm._v(_vm._s(_vm.$t('modal.renamefiletitle')))]),_c('section',[_c('label',{staticClass:\"label\"},[_vm._v(_vm._s(_vm.$t('modal.renamefilename')))]),_c('p',{staticClass:\"control is-fullwidth\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.renameFileFilename),expression:\"renameFileFilename\"}],ref:\"editorFileRenameInput\",staticClass:\"input\",attrs:{\"id\":\"txt-editor-file-rename\",\"type\":\"text\",\"placeholder\":_vm.$t(\"modal.renamefilenameplaceholder\")},domProps:{\"value\":(_vm.renameFileFilename)},on:{\"keyup\":[function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"enter\",13)){ return null; }_vm.renameFileGo($event)},function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"esc\",27)){ return null; }_vm.renameFileDiscard($event)}],\"input\":function($event){if($event.target.composing){ return; }_vm.renameFileFilename=$event.target.value}}}),_c('span',{staticClass:\"help is-danger is-hidden\"},[_vm._v(_vm._s(_vm.$t('modal.renamefileinvalid')))])])]),_c('footer',[_c('a',{staticClass:\"button is-grey is-outlined\",on:{\"click\":_vm.renameFileDiscard}},[_vm._v(_vm._s(_vm.$t('modal.discard')))]),_c('a',{staticClass:\"button is-light-blue\",on:{\"click\":_vm.renameFileGo}},[_vm._v(_vm._s(_vm.$t('modal.renamefile')))])])])])],1)],1)]),_c('transition',{attrs:{\"duration\":400}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.deleteFileShow),expression:\"deleteFileShow\"}],staticClass:\"modal is-superimposed\"},[_c('transition',{attrs:{\"name\":\"modal-background\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.deleteFileShow),expression:\"deleteFileShow\"}],staticClass:\"modal-background\"})]),_c('div',{staticClass:\"modal-container\"},[_c('transition',{attrs:{\"name\":\"modal-content\"}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.deleteFileShow),expression:\"deleteFileShow\"}],staticClass:\"modal-content\"},[_c('header',{staticClass:\"is-red\"},[_vm._v(_vm._s(_vm.$t('modal.deletefiletitle')))]),_c('section',[_c('span',[_vm._v(_vm._s(_vm.$t('modal.deletefilewarn'))+\" \"),_c('strong',[_vm._v(_vm._s(_vm.deleteFileFilename))]),_vm._v(\"?\")])]),_c('footer',[_c('a',{staticClass:\"button is-grey is-outlined\",on:{\"click\":function($event){_vm.deleteFileWarn(false)}}},[_vm._v(_vm._s(_vm.$t('modal.discard')))]),_c('a',{staticClass:\"button is-red\",on:{\"click\":_vm.deleteFileGo}},[_vm._v(\" \"+_vm._s(_vm.$t('modal.delete')))])])])])],1)],1)])],1)])}\n_p.staticRenderFns = [  ];\nvar _e = {}; _v(_e); Object.assign(_e.default.options||_e.default, _p)\nmodule.exports = _e\n    ",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1548128996000,
devLibsRequired : undefined
};