module.exports = { contents: "'use strict';\n\n/* global appconfig, runmode */\n\nvar _jquery = require(\"jquery\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require(\"lodash\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _vue = require(\"vue/dist/vue.min.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _veeValidate = require(\"vee-validate\");\n\nvar _veeValidate2 = _interopRequireDefault(_veeValidate);\n\nvar _axios = require(\"axios\");\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_vue2.default.use(_veeValidate2.default, {\n  enableAutoClasses: true,\n  classNames: {\n    touched: 'is-touched', // the control has been blurred\n    untouched: 'is-untouched', // the control hasn't been blurred\n    valid: 'is-valid', // model is valid\n    invalid: 'is-invalid', // model is invalid\n    pristine: 'is-pristine', // control has not been interacted with\n    dirty: 'is-dirty' // control has been interacted with\n  }\n});\n\n(0, _jquery2.default)(document).ready(function ($) {\n  new _vue2.default({ // eslint-disable-line no-new\n    el: 'main',\n    data: {\n      loading: false,\n      state: 'welcome',\n      syscheck: {\n        ok: false,\n        error: '',\n        results: []\n      },\n      dbcheck: {\n        ok: false,\n        error: ''\n      },\n      gitcheck: {\n        ok: false,\n        error: ''\n      },\n      final: {\n        ok: false,\n        error: '',\n        results: []\n      },\n      conf: {\n        title: appconfig.title || 'Wiki',\n        host: appconfig.host || 'http://',\n        port: appconfig.port || 80,\n        lang: appconfig.lang || 'en',\n        public: appconfig.public === true,\n        db: appconfig.db || 'mongodb://localhost:27017/wiki',\n        pathData: './data',\n        pathRepo: './repo',\n        gitUseRemote: appconfig.git !== false,\n        gitUrl: '',\n        gitBranch: 'master',\n        gitAuthType: 'ssh',\n        gitAuthSSHKey: '',\n        gitAuthUser: '',\n        gitAuthPass: '',\n        gitAuthSSL: true,\n        gitShowUserEmail: true,\n        gitServerEmail: '',\n        adminEmail: '',\n        adminPassword: '',\n        adminPasswordConfirm: ''\n      },\n      considerations: {\n        https: false,\n        port: false,\n        localhost: false\n      }\n    },\n    computed: {\n      currentProgress: function currentProgress() {\n        var perc = '0%';\n        switch (this.state) {\n          case 'welcome':\n            perc = '0%';\n            break;\n          case 'syscheck':\n            perc = this.syscheck.ok ? '15%' : '5%';\n            break;\n          case 'general':\n            perc = '20%';\n            break;\n          case 'considerations':\n            perc = '30%';\n            break;\n          case 'db':\n            perc = '35%';\n            break;\n          case 'dbcheck':\n            perc = this.dbcheck.ok ? '50%' : '40%';\n            break;\n          case 'paths':\n            perc = '55%';\n            break;\n          case 'git':\n            perc = '60%';\n            break;\n          case 'gitcheck':\n            perc = this.gitcheck.ok ? '75%' : '65%';\n            break;\n          case 'admin':\n            perc = '80%';\n            break;\n        }\n        return perc;\n      }\n    },\n    mounted: function mounted() {\n      if (appconfig.paths) {\n        this.conf.pathData = appconfig.paths.data || './data';\n        this.conf.pathRepo = appconfig.paths.repo || './repo';\n      }\n      if (appconfig.git !== false && _lodash2.default.isPlainObject(appconfig.git)) {\n        this.conf.gitUrl = appconfig.git.url || '';\n        this.conf.gitBranch = appconfig.git.branch || 'master';\n        this.conf.gitShowUserEmail = appconfig.git.showUserEmail !== false;\n        this.conf.gitServerEmail = appconfig.git.serverEmail || '';\n        if (_lodash2.default.isPlainObject(appconfig.git.auth)) {\n          this.conf.gitAuthType = appconfig.git.auth.type || 'ssh';\n          this.conf.gitAuthSSHKey = appconfig.git.auth.privateKey || '';\n          this.conf.gitAuthUser = appconfig.git.auth.username || '';\n          this.conf.gitAuthPass = appconfig.git.auth.password || '';\n          this.conf.gitAuthSSL = appconfig.git.auth.sslVerify !== false;\n        }\n      }\n    },\n    methods: {\n      proceedToWelcome: function proceedToWelcome(ev) {\n        this.state = 'welcome';\n        this.loading = false;\n      },\n      proceedToSyscheck: function proceedToSyscheck(ev) {\n        var self = this;\n        this.state = 'syscheck';\n        this.loading = true;\n        self.syscheck = {\n          ok: false,\n          error: '',\n          results: []\n        };\n\n        _lodash2.default.delay(function () {\n          _axios2.default.post('/syscheck').then(function (resp) {\n            if (resp.data.ok === true) {\n              self.syscheck.ok = true;\n              self.syscheck.results = resp.data.results;\n            } else {\n              self.syscheck.ok = false;\n              self.syscheck.error = resp.data.error;\n            }\n            self.loading = false;\n            self.$nextTick();\n          }).catch(function (err) {\n            window.alert(err.message);\n          });\n        }, 1000);\n      },\n      proceedToGeneral: function proceedToGeneral(ev) {\n        var self = this;\n        self.state = 'general';\n        self.loading = false;\n        self.$nextTick(function () {\n          self.$validator.validateAll('general');\n        });\n      },\n      proceedToConsiderations: function proceedToConsiderations(ev) {\n        this.considerations = {\n          https: !_lodash2.default.startsWith(this.conf.host, 'https'),\n          port: false, // TODO\n          localhost: _lodash2.default.includes(this.conf.host, 'localhost')\n        };\n        this.state = 'considerations';\n        this.loading = false;\n      },\n      proceedToDb: function proceedToDb(ev) {\n        var self = this;\n        if (runmode.staticMongo) {\n          return self.proceedToDbcheck();\n        }\n        self.state = 'db';\n        self.loading = false;\n        self.$nextTick(function () {\n          self.$validator.validateAll('db');\n        });\n      },\n      proceedToDbcheck: function proceedToDbcheck(ev) {\n        var self = this;\n        this.state = 'dbcheck';\n        this.loading = true;\n        self.dbcheck = {\n          ok: false,\n          error: ''\n        };\n\n        _lodash2.default.delay(function () {\n          _axios2.default.post('/dbcheck', {\n            db: self.conf.db\n          }).then(function (resp) {\n            if (resp.data.ok === true) {\n              self.dbcheck.ok = true;\n            } else {\n              self.dbcheck.ok = false;\n              self.dbcheck.error = resp.data.error;\n            }\n            self.loading = false;\n            self.$nextTick();\n          }).catch(function (err) {\n            window.alert(err.message);\n          });\n        }, 1000);\n      },\n      proceedToPaths: function proceedToPaths(ev) {\n        var self = this;\n        self.state = 'paths';\n        self.loading = false;\n        self.$nextTick(function () {\n          self.$validator.validateAll('paths');\n        });\n      },\n      proceedToGit: function proceedToGit(ev) {\n        var self = this;\n        self.state = 'git';\n        self.loading = false;\n        self.$nextTick(function () {\n          self.$validator.validateAll('git');\n        });\n      },\n      proceedToGitCheck: function proceedToGitCheck(ev) {\n        var self = this;\n        this.state = 'gitcheck';\n        this.loading = true;\n        self.gitcheck = {\n          ok: false,\n          results: [],\n          error: ''\n        };\n\n        _lodash2.default.delay(function () {\n          _axios2.default.post('/gitcheck', self.conf).then(function (resp) {\n            if (resp.data.ok === true) {\n              self.gitcheck.ok = true;\n              self.gitcheck.results = resp.data.results;\n            } else {\n              self.gitcheck.ok = false;\n              self.gitcheck.error = resp.data.error;\n            }\n            self.loading = false;\n            self.$nextTick();\n          }).catch(function (err) {\n            window.alert(err.message);\n          });\n        }, 1000);\n      },\n      proceedToAdmin: function proceedToAdmin(ev) {\n        var self = this;\n        self.state = 'admin';\n        self.loading = false;\n        self.$nextTick(function () {\n          self.$validator.validateAll('admin');\n        });\n      },\n      proceedToFinal: function proceedToFinal(ev) {\n        var self = this;\n        self.state = 'final';\n        self.loading = true;\n        self.final = {\n          ok: false,\n          error: '',\n          results: []\n        };\n\n        _lodash2.default.delay(function () {\n          _axios2.default.post('/finalize', self.conf).then(function (resp) {\n            if (resp.data.ok === true) {\n              self.final.ok = true;\n              self.final.results = resp.data.results;\n            } else {\n              self.final.ok = false;\n              self.final.error = resp.data.error;\n            }\n            self.loading = false;\n            self.$nextTick();\n          }).catch(function (err) {\n            window.alert(err.message);\n          });\n        }, 1000);\n      },\n      finish: function finish(ev) {\n        var self = this;\n        self.state = 'restart';\n\n        _lodash2.default.delay(function () {\n          _axios2.default.post('/restart', {}).then(function (resp) {\n            _lodash2.default.delay(function () {\n              window.location.assign(self.conf.host);\n            }, 30000);\n          }).catch(function (err) {\n            window.alert(err.message);\n          });\n        }, 1000);\n      }\n    }\n  });\n});",
dependencies: ["jquery","lodash","vue/dist/vue.min.js","vee-validate","axios"],
sourceMap: {},
headerContent: undefined,
mtime: 1548128996000,
devLibsRequired : undefined
};