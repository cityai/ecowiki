module.exports = { contents: "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n\nvar mde = void 0;\n\nexports.default = {\n  name: 'editor',\n  props: ['currentPath'],\n  data: function data() {\n    return {};\n  },\n\n  computed: {\n    insertContent: function insertContent() {\n      return this.$store.state.editor.insertContent;\n    }\n  },\n  methods: {\n    insert: function insert(content) {\n      if (mde.codemirror.doc.somethingSelected()) {\n        mde.codemirror.execCommand('singleSelection');\n      }\n      mde.codemirror.doc.replaceSelection(this.insertContent);\n    },\n    save: function save() {\n      var self = this;\n      this.$http.put(window.location.href, {\n        markdown: mde.value()\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (resp) {\n        if (resp.ok) {\n          window.location.assign(siteRoot + '/' + self.currentPath);\n        } else {\n          self.$store.dispatch('alert', {\n            style: 'red',\n            icon: 'ui-2_square-remove-09',\n            msg: resp.msg\n          });\n        }\n      }).catch(function (err) {\n        self.$store.dispatch('alert', {\n          style: 'red',\n          icon: 'ui-2_square-remove-09',\n          msg: 'Error: ' + err.body.msg\n        });\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var self = this;\n    FuseBox.import('/js/simplemde/simplemde.min.js', function (SimpleMDE) {\n      mde = new SimpleMDE({\n        autofocus: true,\n        autoDownloadFontAwesome: false,\n        element: _this.$refs.editorTextArea,\n        placeholder: 'Enter Markdown formatted content here...',\n        spellChecker: false,\n        status: false,\n        toolbar: [{\n          name: 'bold',\n          action: SimpleMDE.toggleBold,\n          className: 'icon-bold',\n          title: 'Bold'\n        }, {\n          name: 'italic',\n          action: SimpleMDE.toggleItalic,\n          className: 'icon-italic',\n          title: 'Italic'\n        }, {\n          name: 'strikethrough',\n          action: SimpleMDE.toggleStrikethrough,\n          className: 'icon-strikethrough',\n          title: 'Strikethrough'\n        }, '|', {\n          name: 'heading-1',\n          action: SimpleMDE.toggleHeading1,\n          className: 'icon-header fa-header-x fa-header-1',\n          title: 'Header (Level 1)'\n        }, {\n          name: 'heading-2',\n          action: SimpleMDE.toggleHeading2,\n          className: 'icon-header fa-header-x fa-header-2',\n          title: 'Header (Level 2)'\n        }, {\n          name: 'heading-3',\n          action: SimpleMDE.toggleHeading3,\n          className: 'icon-header fa-header-x fa-header-3',\n          title: 'Header (Level 3)'\n        }, {\n          name: 'quote',\n          action: SimpleMDE.toggleBlockquote,\n          className: 'nc-icon-outline text_quote',\n          title: 'Quote'\n        }, '|', {\n          name: 'unordered-list',\n          action: SimpleMDE.toggleUnorderedList,\n          className: 'nc-icon-outline text_list-bullet',\n          title: 'Bullet List'\n        }, {\n          name: 'ordered-list',\n          action: SimpleMDE.toggleOrderedList,\n          className: 'nc-icon-outline text_list-numbers',\n          title: 'Numbered List'\n        }, '|', {\n          name: 'link',\n          action: function action(editor) {\n            window.alert('Coming soon!');\n          },\n          className: 'nc-icon-outline ui-2_link-68',\n          title: 'Insert Link'\n        }, {\n          name: 'image',\n          action: function action(editor) {\n            self.$store.dispatch('editorFile/open', { mode: 'image' });\n          },\n          className: 'nc-icon-outline design_image',\n          title: 'Insert Image'\n        }, {\n          name: 'file',\n          action: function action(editor) {\n            self.$store.dispatch('editorFile/open', { mode: 'file' });\n          },\n          className: 'nc-icon-outline files_zip-54',\n          title: 'Insert File'\n        }, {\n          name: 'video',\n          action: function action(editor) {\n            self.$store.dispatch('editorVideo/open');\n          },\n          className: 'nc-icon-outline media-1_video-64',\n          title: 'Insert Video Player'\n        }, '|', {\n          name: 'inline-code',\n          action: function action(editor) {\n            if (!editor.codemirror.doc.somethingSelected()) {\n              return self.$store.dispatch('alert', {\n                style: 'orange',\n                icon: 'design_drag',\n                msg: 'Invalid selection. Select at least 1 character.'\n              });\n            }\n            var curSel = editor.codemirror.doc.getSelections();\n            curSel = self._.map(curSel, function (s) {\n              return '`' + s + '`';\n            });\n            editor.codemirror.doc.replaceSelections(curSel);\n          },\n          className: 'nc-icon-outline arrows-4_enlarge-46',\n          title: 'Inline Code'\n        }, {\n          name: 'code-block',\n          action: function action(editor) {\n            self.$store.dispatch('editorCodeblock/open', {\n              initialContent: mde.codemirror.doc.somethingSelected() ? mde.codemirror.doc.getSelection() : ''\n            });\n          },\n          className: 'nc-icon-outline design_code',\n          title: 'Code Block'\n        }, '|', {\n          name: 'table',\n          action: function action(editor) {\n            window.alert('Coming soon!');\n          },\n          className: 'nc-icon-outline ui-2_grid-square',\n          title: 'Insert Table'\n        }, {\n          name: 'horizontal-rule',\n          action: SimpleMDE.drawHorizontalRule,\n          className: 'nc-icon-outline design_distribute-vertical',\n          title: 'Horizontal Rule'\n        }],\n        shortcuts: {\n          'toggleBlockquote': null,\n          'toggleFullScreen': null,\n          'toggleOrderedList': null,\n          'toggleCodeBlock': null\n        }\n      });\n\n      $(window).bind('keydown', function (ev) {\n        if ((ev.ctrlKey || ev.metaKey) && !ev.altKey) {\n          switch (String.fromCharCode(ev.which).toLowerCase()) {\n            case 's':\n              ev.preventDefault();\n              self.save();\n              break;\n          }\n        }\n      });\n\n      _this.$root.$on('editor/save', _this.save);\n      _this.$root.$on('editor/insert', _this.insert);\n\n      _this.$store.dispatch('pageLoader/complete');\n    });\n  }\n};",
dependencies: [],
sourceMap: {},
headerContent: undefined,
mtime: 1548128996000,
devLibsRequired : undefined
};